import com.github.spotbugs.snom.SpotBugsTask

plugins {
    alias libs.plugins.fabric.loom
    id 'maven-publish'
    alias libs.plugins.lombok
    alias libs.plugins.spotbugs.base
    alias libs.plugins.spotless
    alias libs.plugins.modmuss50.publish
}

def local = !System.getenv().containsKey("GITHUB_RUN_NUMBER")

version = "${project.mod_version}-${project.minecraft_version}-${local ? 'local' : "build.${System.getenv("GITHUB_RUN_NUMBER")}"}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

apply from: "https://raw.githubusercontent.com/constellation-mc/artifacts/main/artifacts.groovy"
constellationRepo(project, "dark-matter")

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation libs.fabric.loader

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation libs.fabric.api
    def dm = libs.dark.matter
    [dm.base].each {
        modApi it
        include it
    }
    //modImplementation dm.minecraft
}

tasks.register("spotbugs", SpotBugsTask) { task ->
    sourceSets.each {
        task.sourceDirs.from(task.sourceDirs.files, it.allSource.sourceDirectories)
        task.classDirs.from(task.classDirs.files, it.output)
        task.auxClassPaths.from(task.auxClassPaths.files, it.compileClasspath)
    }
    excludeFilter = file("spotbugs.xml")
    ignoreFailures = true
    reports {
        if (local) {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        } else {
            sarif {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.sarif")
            }
        }
    }
}

spotless {
    java {
        removeUnusedImports()
        palantirJavaFormat('2.47.0').style("GOOGLE")
        trimTrailingWhitespace()
        formatAnnotations()
    }
}

loom {
    //https://gist.github.com/maityyy/3dbcd558d58a6412c3a2a38c72706e8e
    afterEvaluate {
        loom.runs.configureEach {
            vmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")

            vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
            property("mixin.debug.export", "true")
        }
    }
}

processResources {
    def map = [
            "version": project.version,
            "minecraft_version": project.minecraft_version,
            "loader_version": libs.fabric.loader.get().version,
            "fabric_version": libs.fabric.api.get().version
    ]
    inputs.properties(map)
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand map
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/constellation-mc/andromeda"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
